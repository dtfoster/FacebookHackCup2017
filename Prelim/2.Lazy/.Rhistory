source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading_example_input.txt'
outFilePath = './submission/lazy_loading_example_submission.txt'
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
casenum = 0
T = as.integer(readLines(inCon, n = 1))
N = as.numeric(readLines(inCon, n = 1))
T
N
casenum = casenum + 1
weights = as.numeric(readLines(inCon, n = N))
weights
weights = sort(weights, decreasing = TRUE)
weights
?ceil
?ceiling
source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading_example_input.txt'
outFilePath = './submission/lazy_loading_example_submission.txt'
processFile(inFilePath, outFilePath)
weights[1]
weights
answer = answerFunc(weights)
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
answer = answerFunc(weights)
answer
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading_example_input.txt'
outFilePath = './submission/lazy_loading_example_submission.txt'
processFile(inFilePath, outFilePath)
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
weights = 1:11
weights = sort(weights, decreasing = TRUE)
numItems = length(weights)
answer = 0
totalsize = 0
weights
answer = answer + 1
batchsize = ceiling(50 / weights[answer])
totalsize = totalsize + batchsize
batchsize
totalsize
answer = answer + 1
answer
batchsize = ceiling(50 / weights[answer])
batchsize
totalsize = totalsize + batchsize
numItems
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading_example_input.txt'
outFilePath = './submission/lazy_loading_example_submission.txt'
processFile(inFilePath, outFilePath)
source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading.txt'
outFilePath = './submission/lazy_loading_submission.txt'
processFile(inFilePath, outFilePath)
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
casenum = 0
T = as.integer(readLines(inCon, n = 1))
N = as.numeric(readLines(inCon, n = 1))
if ( length(N) == 0 ) {
break
}
casenum = casenum + 1
weights = as.numeric(readLines(inCon, n = N))
answer = answerFunc(weights)
answer
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
N = as.numeric(readLines(inCon, n = 1))
if ( length(N) == 0 ) {
break
}
casenum = casenum + 1
weights = as.numeric(readLines(inCon, n = N))
answer = answerFunc(weights)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
N = as.numeric(readLines(inCon, n = 1))
if ( length(N) == 0 ) {
break
}
casenum = casenum + 1
weights = as.numeric(readLines(inCon, n = N))
answer = answerFunc(weights)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
close(inCon)
close(outCon)
source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading.txt'
outFilePath = './submission/lazy_loading_submission.txt'
processFile(inFilePath, outFilePath)
casenum
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
casenum = 0
T = as.integer(readLines(inCon, n = 1))
while ( TRUE ) {
N = as.numeric(readLines(inCon, n = 1))
if ( length(N) == 0 ) {
break
}
casenum = casenum + 1
weights = as.numeric(readLines(inCon, n = N))
answer = answerFunc(weights)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
casenum
answer = answerFunc(weights)
weights
weights = sort(weights, decreasing = TRUE)
weights
numItems = length(weights)
answer = 0
totalsize = 0
totalsize
numItems
answer = answer + 1
batchsize = ceiling(50 / weights[answer])
totalsize = totalsize + batchsize
totalsize
totalsize
answer = answer + 1
batchsize = ceiling(50 / weights[answer])
totalsize = totalsize + batchsize
totalsize
answer = answer + 1
batchsize = ceiling(50 / weights[answer])
totalsize = totalsize + batchsize
totalsize
batchsize
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
source('./funcs.R')
library(data.table)
inFilePath = './data/lazy_loading.txt'
outFilePath = './submission/lazy_loading_submission.txt'
processFile(inFilePath, outFilePath)
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
casenum = 0
T = as.integer(readLines(inCon, n = 1))
while ( TRUE ) {
N = as.numeric(readLines(inCon, n = 1))
if ( length(N) == 0 ) {
break
}
casenum = casenum + 1
weights = as.numeric(readLines(inCon, n = N))
answer = answerFunc(weights)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(weights){
weights = sort(weights, decreasing = TRUE)
numItems = length(weights)
answer = 0
totalsize = 0
while(totalsize <= numItems){
answer = answer + 1
if (length(weights)==totalsize){
break
}else{
batchsize = ceiling(50 / weights[answer])
totalsize = totalsize + batchsize
}
}
answer = answer - 1
return (answer)
}
library(data.table)
inFilePath = './data/lazy_loading.txt'
outFilePath = './submission/lazy_loading_submission.txt'
processFile(inFilePath, outFilePath)
source('~/Dropbox/Facebook Hack Cup/Prelim/2.Lazy/funcs.R')
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
casenum = 0
T = as.integer(readLines(inCon, n = 1))
while ( TRUE ) {
N = as.numeric(readLines(inCon, n = 1))
if ( length(N) == 0 ) {
break
}
casenum = casenum + 1
info = as.numeric(readLines(inCon, n = 1))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = strsplit(as.numeric(readLines(inCon, n = 1))," ")
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = paste(hitpoints, spells)
return (answer)
}
library(data.table)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output'
processFile(inFilePath, outFilePath)
