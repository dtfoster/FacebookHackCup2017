}
casenum = casenum + 1
info = as.numeric(readLines(inCon, n = 1))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = strsplit(as.numeric(readLines(inCon, n = 1))," ")
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = paste(hitpoints, spells)
return (answer)
}
library(data.table)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
casenum = 0
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
N = as.numeric(readLines(inCon, n = 1))
info = as.numeric(readLines(inCon, n = 1))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = strsplit(as.numeric(readLines(inCon, n = 1))," ")
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = paste(hitpoints, spells)
return (answer)
}
library(data.table)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
casenum
casenum = 1
N = as.numeric(readLines(inCon, n = 1))
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
N = as.numeric(readLines(inCon, n = 1))
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
info = as.numeric(readLines(inCon, n = 1))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = strsplit(as.numeric(readLines(inCon, n = 1))," ")
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = paste(hitpoints, spells)
return (answer)
}
library(data.table)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
info = as.numeric(readLines(inCon, n = 1))
info
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
readLines(inCon, n = 1)
info = strsplit(readLines(inCon, n = 1)), " ")
info = strsplit(readLines(inCon, n = 1), " ")
info
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = strsplit(readLines(inCon, n = 1), " ")
info
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
numSpells
spells = strsplit(as.numeric(readLines(inCon, n = 1))," ")
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
spells
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(as.numeric(readLines(inCon, n = 1))," "))
readLines(inCon, n = 1)
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
info
readLines(inCon, n = 1)
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = paste(hitpoints, spells)
return (answer)
}
library(data.table)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
spells
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = -1
spells
spell = spells[1]
spellStats = strsplit(spell, "d")
spellStats
?strsplit
spell = "2d4+32"
tmp = unlist(strsplit(spell, "d"))
tmp
numDice = as.integer(tmp[1])
tmp = unlist(strsplit(tmp[2], "\\+|\\-"))
tmp
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
tmp
negative = grep("-", spell)
negative
spell
negative = grep("+", spell)
negative
negative = grepl("+", spell)
negative
spellStats = getSpellStats(spell)
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
spellStats = getSpellStats(spell)
spellStats
spell = "2d5-43"
spellStats
spellStats = getSpellStats(spell)
spellStats
spell
grepl("+", spell)
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("\\+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
spellStats = getSpellStats(spell)
spellStats
spell = "2d4"
spellStats = getSpellStats(spell)
spellStats
?iferror
?ifna
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("\\+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
addOn = ifelse(is.na(addOn),0,addOn)
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
spellStats = getSpellStats(spell)
spellStats
install.packages("dice")
library(dice)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn)
out
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = -1
for (spell in spells){
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn)
idx = which(out$Sum >= hitpoints)
prob = sum(out$Probability[idx])
if (prob > answer){
answer = prob
}
}
return (answer)
}
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("\\+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
addOn = ifelse(is.na(addOn),0,addOn)
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
library(dice)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
spell
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = -1
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn)
idx = which(out$Sum >= hitpoints)
prob = sum(out$Probability[idx])
pro
prob
out
spell
hitpoints
idx
out$Sum
out
idx = which(out$probabilities$Sum >= hitpoints)
prob = sum(out$probabilities$Probability[idx])
out$probabilities
class(out$probabilities)
idx = which(out$probabilities[,'Sum'] >= hitpoints)
prob = sum(out$probabilities[,'Probability'][idx])
prob
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = -1
for (spell in spells){
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn)
idx = which(out$probabilities[,'Sum'] >= hitpoints)
prob = sum(out$probabilities[,'Probability'][idx])
if (prob > answer){
answer = prob
}
}
return (answer)
}
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("\\+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
addOn = ifelse(is.na(addOn),0,addOn)
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
library(dice)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
spells
answer = -1
spell=spell[1]
spell=spells[1]
spell
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn)
out
spellStats = getSpellStats(spell)
spellStats
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn)
out
sum(out$probabilities[,'Probability'])
?getSumProbs
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn
,perDieMinOfOne = FALSE)
out
idx = which(out$probabilities[,'Sum'] >= hitpoints)
prob = sum(out$probabilities[,'Probability'][idx])
prob
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = -1
for (spell in spells){
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn
,perDieMinOfOne = FALSE)
idx = which(out$probabilities[,'Sum'] >= hitpoints)
prob = sum(out$probabilities[,'Probability'][idx])
if (prob > answer){
answer = prob
}
}
return (answer)
}
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("\\+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
addOn = ifelse(is.na(addOn),0,addOn)
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
library(dice)
inFilePath = './input/fighting_the_zombie_example_input.txt'
outFilePath = './output/fighting_the_zombie_example_output.txt'
processFile(inFilePath, outFilePath)
processFile = function(inFilePath, outFilePath) {
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
for (casenum in 1:T){
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
answer = answerFunc(hitpoints, spells)
writeOut = paste0("Case #", casenum, ": ", answer)
writeLines(writeOut, outCon)
}
close(inCon)
close(outCon)
}
answerFunc = function(hitpoints, spells){
answer = -1
for (spell in spells){
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn
,perDieMinOfOne = FALSE)
idx = which(out$probabilities[,'Sum'] >= hitpoints)
prob = sum(out$probabilities[,'Probability'][idx])
if (prob > answer){
answer = prob
}
}
return (answer)
}
getSpellStats = function(spell){
tmp = unlist(strsplit(spell, "d|\\+|\\-"))
numDice = as.integer(tmp[1])
diceType = as.integer(tmp[2])
addOnSign = ifelse(grepl("\\+", spell), 1, -1)
addOn = as.numeric(tmp[3]) * addOnSign
addOn = ifelse(is.na(addOn),0,addOn)
return (list(numDice = numDice, diceType = diceType, addOn = addOn))
}
library(dice)
inFilePath = './input/fighting_the_zombie.txt'
outFilePath = './output/fighting_the_zombie.txt'
processFile(inFilePath, outFilePath)
inCon = file(inFilePath, "r")
outCon = file(outFilePath, "w")
T = as.integer(readLines(inCon, n = 1))
casenum = 1
info = unlist(strsplit(readLines(inCon, n = 1), " "))
hitpoints = as.numeric(info[1])
numSpells = as.integer(info[2])
spells = unlist(strsplit(readLines(inCon, n = 1)," "))
spell=spells[1]
answer = -1
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn
,perDieMinOfOne = FALSE)
spell = spells[2]
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn
,perDieMinOfOne = FALSE)
spell=spells[3]
spells
spell=spells[4]
spellStats = getSpellStats(spell)
out = getSumProbs(
ndicePerRoll = spellStats$numDice
,nsidesPerDie = spellStats$diceType
,sumModifier = spellStats$addOn
,perDieMinOfOne = FALSE)
